{
  "name": "node-geocoder",
  "version": "3.16.0",
  "description": "Node Geocoder, node geocoding library, supports google maps, mapquest, open street map, tom tom, promise",
  "main": "index.js",
  "scripts": {
    "test": "mocha --check-leaks",
    "lint": "eslint lib",
    "ci": "npm run lint && npm run test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nchaulet/node-geocoder.git"
  },
  "keywords": [
    "geocoder",
    "geocoding",
    "geo",
    "google",
    "maps",
    "mapquest",
    "agol",
    "arcgis",
    "tomtom"
  ],
  "author": {
    "name": "nchaulet"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nchaulet/node-geocoder/issues"
  },
  "dependencies": {
    "bluebird": "^3.4.6",
    "request": "^2.74.0",
    "request-promise": "^4.1.1"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.11.0",
    "mocha": "^3.2.0",
    "sinon": "^1.17.3"
  },
  "eslintConfig": {
    "env": {
      "node": true
    },
    "rules": {
      "strict": 0,
      "quotes": [
        1,
        "single"
      ],
      "no-console": 1,
      "camelcase": 0,
      "no-underscore-dangle": 0,
      "no-shadow": 0,
      "no-multi-spaces": 0,
      "eqeqeq": 0,
      "key-spacing": 0,
      "comma-spacing": 0,
      "no-unreachable": 1
    }
  },
  "readme": "# node-geocoder\n\n[![Build Status](https://img.shields.io/travis/nchaulet/node-geocoder.svg?style=flat-square)](https://travis-ci.org/nchaulet/node-geocoder)\n![Dependencycy status](https://img.shields.io/david/nchaulet/node-geocoder.svg?style=flat-square)\n[![npm version](https://img.shields.io/npm/v/node-geocoder.svg?style=flat-square)](https://www.npmjs.com/package/node-geocoder)\n\n\nNode library for geocoding and reverse geocoding. Can be used as a nodejs library\n\n## Installation (nodejs library)\n\n    npm install node-geocoder\n\n## Usage example\n\n```javascript\nvar NodeGeocoder = require('node-geocoder');\n\nvar options = {\n  provider: 'google',\n\n  // Optional depending on the providers\n  httpAdapter: 'https', // Default\n  apiKey: 'YOUR_API_KEY', // for Mapquest, OpenCage, Google Premier\n  formatter: null         // 'gpx', 'string', ...\n};\n\nvar geocoder = NodeGeocoder(options);\n\n// Using callback\ngeocoder.geocode('29 champs elysée paris', function(err, res) {\n  console.log(res);\n});\n\n// Or using Promise\ngeocoder.geocode('29 champs elysée paris')\n  .then(function(res) {\n    console.log(res);\n  })\n  .catch(function(err) {\n    console.log(err);\n  });\n\n// output :\n[{\n  latitude: 48.8698679,\n  longitude: 2.3072976,\n  country: 'France',\n  countryCode: 'FR',\n  city: 'Paris',\n  zipcode: '75008',\n  streetName: 'Champs-Élysées',\n  streetNumber: '29',\n  administrativeLevels: {\n    level1long: 'Île-de-France',\n    level1short: 'IDF',\n    level2long: 'Paris',\n    level2short: '75'\n  },\n  provider: 'google'\n}]\n```\n\n## Advanced usage (only google, here, mapquest, locationiq, and opencage providers)\n\n```javascript\ngeocoder.geocode({address: '29 champs elysée', country: 'France', zipcode: '75008'}, function(err, res) {\n  console.log(res);\n});\n\n// OpenCage advanced usage example\ngeocoder.geocode({address: '29 champs elysée', countryCode: 'fr', minConfidence: 0.5, limit: 5}, function(err, res) {\n  console.log(res);\n});\n\n// Reverse example\n\n// Using callback\ngeocoder.reverse({lat:45.767, lon:4.833}, function(err, res) {\n  console.log(res);\n});\n\n// Or using Promise\ngeocoder.reverse({lat:45.767, lon:4.833})\n  .then(function(res) {\n    console.log(res);\n  })\n  .catch(function(err) {\n    console.log(err);\n  });\n\n// Batch geocode\n\ngeocoder.batchGeocode(['13 rue sainte catherine', 'another adress'], function (err, results) {\n  // Return an array of type {error: false, value: []}\n  console.log(results) ;\n});\n\n// Set specific http request headers:\nvar HttpsAdapter = require('node-geocoder/lib/httpadapter/httpsadapter.js')\nvar httpAdapter = new HttpsAdapter(null, {\n  headers: {\n    'user-agent': 'My application <email@domain.com>',\n    'X-Specific-Header': 'Specific value'\n  }\n});\n\nvar geocoder = NodeGeocoder({\n  provider: 'google',\n  httpAdapter: httpAdapter\n});\n```\n\n## Geocoder Provider\n\n* `google` : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use `options.clientId`and `options.apiKey`(privateKey) for business licence. You can also use `options.language` and `options.region` to specify language and region, respectively. Note that 'https' is required when using an apiKey\n* `here` : HereGeocoder. Supports address geocoding and reverse geocoding. You must specify `options.appId` and `options.appCode` with your license keys. You can also use `options.language`, `options.politicalView` ([read about political views here](https://developer.here.com/rest-apis/documentation/geocoder/topics/political-views.html)), `options.country`, and `options.state`.\n* `freegeoip` : FreegeoipGeocoder. Supports IP geocoding\n* `datasciencetoolkit` : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use `options.host` to specify a local instance\n* `openstreetmap` : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use `options.language` and `options.email` to specify a language and a contact email address.\n  * For `geocode`, you can use an object as value, specifying one or several parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters\n  * For `reverse`, you can use additional parameters from https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n  * You should specify a specific `user-agent` or `referrer` header field as required by\n  https://wiki.openstreetmap.org/wiki/Nominatim_usage_policy\n* `locationiq` : LocationIQGeocoder. Supports address geocoding and reverse geocoding just like openstreetmap but does require only a locationiq api key to be set.\n  * For `geocode` you can use simple `q` parameter or an object containing th edifferent parameters defined here: http://locationiq.org/#docs\n  * For `reverse`, you can pass over `{lat, lon}` and additional parameters defined in http://locationiq.org/#docs\n  * No need to specify referer or email addresses, just locationiq api key, note that there are rate limits!\n* `mapquest` : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n* `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\n* `agol` : ArcGis Online Geocoding service. Supports geocoding and reverse. Requires a client_id & client_secret and 'https' http adapter\n* `tomtom`: TomTomGeocoder. Supports address geocoding. You need to specify `options.apiKey`\n* `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers. You need to specify `options.apiKey`\n* `opencage`: OpenCage Geocoder. Uses multiple open sources. Supports address and reverse geocoding. You need to specify `options.apiKey`\n* `smartyStreet`: Smarty street geocoder (US only), you need to specify `options.auth_id` and `options.auth_token`\n* `geocodio`: Geocodio, Supports address geocoding and reverse geocoding (US only)\n* `yandex`: Yandex support address geocoding, you can use `options.language` to specify language\n* `teleport`: Teleport supports city and urban area forward and reverse geocoding; for more information, see [Teleport API documentation](https://developers.teleport.org/api/)\n* `opendatafrance`: OpendataFranceGeocoder supports forward and reverse geocoding in France; for more information, see [OpendataFrance API documentation](https://adresse.data.gouv.fr/api/)\n\n## Http adapter\n\n* `https`: This adapter uses the Https nodejs library (default)\n* `http`: This adapter uses the Http nodejs library\n* `request`: This adapter uses the request nodejs library\n\nYou can specify request timeout using paramater `options.timeout`\n\n## Formatter\n\n* `gpx`    : format result using GPX format\n* `string` : format result to an String array (you need to specify `options.formatterPattern` key)\n    * `%P` country\n    * `%p` country code\n    * `%n` street number\n    * `%S` street name\n    * `%z` zip code\n    * `%T` State\n    * `%t` state code\n\n## More\n\n### options\n\n[`node-geocoder-cli`](https://github.com/nchaulet/node-geocoder-cli) You can use node-geocoder-cli to geocode in shell\n\n### Extending node geocoder\n\nYou can add new geocoders by implementing the two methods `geocode` and `reverse`:\n\n```javascript\nvar geocoder = {\n    geocode: function(value, callback) { ... },\n    reverse: function(query, callback) { var lat = query.lat; var lon = query.lon; ... }\n}\n```\n\nYou can also add formatter implementing the following interface\n\n```javascript\nvar formatter = {\n    format: function(data) { return formattedData; },\n}\n```\n### Contributing\n\nYou can improve this project by adding new geocoders or http adapters.\n\nTo run tests just `npm test`.\n\nTo check code style just run `npm run lint`.\n",
  "readmeFilename": "README.md",
  "_id": "node-geocoder@3.16.0",
  "dist": {
    "shasum": "42cec06d366cb78f2451e6170d4d429e4d05c8c4"
  },
  "_from": "node-geocoder@",
  "_resolved": "https://registry.npmjs.org/node-geocoder/-/node-geocoder-3.16.0.tgz"
}
